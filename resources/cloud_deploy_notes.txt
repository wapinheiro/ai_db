#Connect to the instance
ssh -i "wagner_keypair_aidb.pem" ubuntu@public_ip

#Update the instance
sudo apt update && sudo apt upgrade -y


#Setup front-end
##Git
sudo apt install git-all 
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
git clone [repo]

##Web server
Usually Apache already comes installed and setup on Ubuntu, so just check 
the public DNS and see if it points to the Apache's default page. Alternatively,
Nginx can be used as a web server.

##Nginx (if needed)
sudo systemctl status nginx <-- to check if Nginx is already installed.
sudo apt update
sudo apt install nginx

##Setup Apache to access main ui folder
--> change ownership of the newsite folder (if needed)
sudo chown -R www-data:www-data /home/ubuntu/ai_db/ui
--> set permissions
sudo chown -R $USER:$USER /var/www/newsite
sudo chmod -R 755 /var/www
--> create a virtual host file:
sudo nano /etc/apache2/sites-available/newsite.conf
paste this content:
<VirtualHost *:80>
    ServerAdmin admin@example.com
    ServerName example.com --> replace with domain name or IP address
    ServerAlias www.example.com
    DocumentRoot /var/www/newsite --> replace with new root folder
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
--> Disable the default site (optional) and enable your new site:
sudo a2dissite 000-default.conf
sudo a2ensite newsite.conf
--> Enable Apache Rewrite Module (if needed):
sudo a2enmod rewrite
--> To apply the changes, restart Apache:
sudo systemctl restart apache2



#Setup back end
##Python
--> update and upgrade
sudo apt update
sudo apt upgrade

--> install Python
Ubuntu usually comes with Python pre-installed. You can check the version of Python that is currently installed by typing:
python3 --version
if you need to install python:
sudo apt install python3

--> install PIP
sudo apt install python3-pip
to check pip installation:
pip3 --version

--> install additional python tools
sudo apt install build-essential libssl-dev libffi-dev python3-dev python3-venv

--> venv
$ python3 -m venv myprojectenv
$ source myprojectenv/bin/activate

#Postgres
--> install postgres 
$ sudo apt install postgresql postgresql-contrib libpq-dev
--> verify installation
$ sudo systemctl status postgresql
--> switch to the postgres user and Database
$ sudo -i -u postgres
--> postgres terminal:
$ psql
--> test:
$ \l --> list all databases
--> set password for postgres default user (postgres)
$ ALTER USER postgres WITH PASSWORD 'newpassword';
--> quit postgres terminal
$ \q
--> exit postgres user
$ exit
--> Configure Remote Access
Edit the PostgreSQL configuration file postgresql.conf:
$ sudo nano /etc/postgresql/16/main/postgresql.conf
--> Change the listen_addresses line to listen_addresses = '*' to listen on all IP addresses or specify specific IPs.
--> Edit the pg_hba.conf file to configure client authentication:
$ sudo nano /etc/postgresql/16/main/pg_hba.conf
Add a line to allow access from your specific IP addresses or all IP addresses (0.0.0.0/0):
host    all             all             0.0.0.0/0          md5
--> Restart PostgreSQL to apply the changes:
$ sudo systemctl restart postgresql

Connect to DBeaver





#Install dependencies
pip3 install Flask
pip3 install flask-cors
pip3 install psycopg2-binary
sudo apt install build-essential
pip3 install psycopg2
pip3 install google.generativeai





















